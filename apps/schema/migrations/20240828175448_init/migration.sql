CREATE SCHEMA IF NOT EXISTS public;

-- CREATE TRIGGER
CREATE FUNCTION trigger_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE users (
    user_id VARCHAR NOT NULL,
    nickname VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    profile_image_url VARCHAR NOT NULL,
    gender VARCHAR NOT NULL,
    birthday TIMESTAMP NOT NULL,
    oauth_provider_type VARCHAR NOT NULL,
    oauth_provider_id VARCHAR NOT NULL,
    personal_code VARCHAR NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_at TIMESTAMPTZ NULL,
    PRIMARY KEY (user_id),
    UNIQUE (personal_code)
);

CREATE INDEX index_users_oauth_provider_id ON users(oauth_provider_id);

CREATE TRIGGER users_set_updated_at
BEFORE UPDATE ON users FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE couple (
    couple_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    inviter_id VARCHAR NOT NULL,
    invitee_id VARCHAR NOT NULL,
    start_date TIMESTAMP NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (couple_id),
    UNIQUE (inviter_id),
    UNIQUE (invitee_id),
    FOREIGN KEY (inviter_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (invitee_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE INDEX index_couple_inviter_id ON couple(inviter_id);
CREATE INDEX index_couple_invitee_id ON couple(invitee_id);

CREATE TRIGGER couple_set_updated_at
BEFORE UPDATE ON couple FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TYPE enum_couple_action AS ENUM ('STARTED', 'ENDED');

CREATE TABLE couple_log (
    couple_log_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    couple_id VARCHAR NOT NULL,
    inviter_id VARCHAR NOT NULL,
    invitee_id VARCHAR NOT NULL,
    action VARCHAR NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (couple_log_id),
    FOREIGN KEY (inviter_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (invitee_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE TRIGGER couple_log_set_updated_at
BEFORE UPDATE ON couple_log FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE _data_migrations (
    version TEXT NOT NULL,
    name TEXT NOT NULL,
    started_at TIMESTAMP(3) NOT NULL,
    finished_at TIMESTAMP(3) NOT NULL,
    PRIMARY KEY (version)
);
