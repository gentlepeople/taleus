CREATE SCHEMA IF NOT EXISTS public;

CREATE TABLE _data_migrations (
    version TEXT NOT NULL,
    name TEXT NOT NULL,
    started_at TIMESTAMP(3) NOT NULL,
    finished_at TIMESTAMP(3) NOT NULL,
    PRIMARY KEY (version)
);

-- CREATE TRIGGER
CREATE FUNCTION trigger_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE users (
    user_id VARCHAR NOT NULL,
    nickname VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    profile_image_url VARCHAR NOT NULL,
    gender VARCHAR NOT NULL,
    birthday TIMESTAMP NOT NULL,
    oauth_provider_type VARCHAR NOT NULL,
    oauth_provider_id VARCHAR NOT NULL,
    personal_code VARCHAR NOT NULL,
    notification_time TIME NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_at TIMESTAMPTZ NULL,
    PRIMARY KEY (user_id),
    UNIQUE (personal_code)
);

CREATE INDEX index_users_oauth_provider_id ON users(oauth_provider_id);
CREATE INDEX index_users_notification_time ON users(notification_time);

CREATE TRIGGER users_set_updated_at
BEFORE UPDATE ON users FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE couple (
    couple_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    inviter_id VARCHAR NOT NULL,
    invitee_id VARCHAR NOT NULL,
    start_date TIMESTAMP NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_At TIMESTAMPTZ NULL,
    PRIMARY KEY (couple_id),
    UNIQUE (inviter_id),
    UNIQUE (invitee_id),
    FOREIGN KEY (inviter_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (invitee_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE INDEX index_couple_inviter_id ON couple(inviter_id);
CREATE INDEX index_couple_invitee_id ON couple(invitee_id);

CREATE TRIGGER couple_set_updated_at
BEFORE UPDATE ON couple FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE mission (
    mission_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR NOT NULL,
    category VARCHAR NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (mission_id)
);

CREATE TRIGGER mission_set_updated_at
BEFORE UPDATE ON mission FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE question (
    question_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    mission_id INTEGER NOT NULL,
    question_order INTEGER NOT NULL,
    response_type VARCHAR NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (question_id),
    UNIQUE (mission_id, question_order),
    FOREIGN KEY (mission_id)
        REFERENCES mission(mission_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE TRIGGER question_set_updated_at
BEFORE UPDATE ON question FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE couple_mission (
    couple_mission_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    couple_id INTEGER NOT NULL,
    mission_id INTEGER NOT NULL,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    reminder_click_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_at TIMESTAMPTZ NULL,
    PRIMARY KEY (couple_mission_id),
    FOREIGN KEY (couple_id)
        REFERENCES couple(couple_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (mission_id)
        REFERENCES mission(mission_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE TRIGGER couple_mission_set_updated_at
BEFORE UPDATE ON couple_mission FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

CREATE TABLE mission_reminder_log (
    mission_reminder_log_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    couple_mission_id INTEGER NOT NULL,
    sender_id VARCHAR NOT NULL,
    receiver_id VARCHAR NOT NULL,
    reminder_time TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_at TIMESTAMPTZ NULL,
    PRIMARY KEY (mission_reminder_log_id),
    FOREIGN KEY (couple_mission_id)
        REFERENCES couple_mission(couple_mission_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (sender_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (receiver_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE TRIGGER mission_reminder_log_set_updated_at
BEFORE UPDATE ON mission_reminder_log FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();


CREATE TABLE response (
    response_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    couple_mission_id INTEGER NULL,
    user_id VARCHAR NOT NULL,
    question_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    deleted_at TIMESTAMPTZ NULL,
    PRIMARY KEY (response_id),
    UNIQUE (couple_mission_id, user_id, question_id),
    FOREIGN KEY (question_id)
        REFERENCES question(question_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (couple_mission_id)
        REFERENCES couple_mission(couple_mission_id) ON UPDATE CASCADE ON DELETE RESTRICT,
    FOREIGN KEY (user_id)
        REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE RESTRICT
);

CREATE INDEX index_response_user_id_question_id ON response(user_id, question_id);

CREATE TRIGGER response_set_updated_at
BEFORE UPDATE ON response FOR EACH ROW
EXECUTE PROCEDURE trigger_set_updated_at();

