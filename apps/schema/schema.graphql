directive @upper on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type AppleLoginResponse {
  """Custom token of firebase authentication user.(only if success)"""
  customToken: String!
  userId: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type CompletedCoupleMissionData {
  partnerResponse: Response
  question: Question!
  userResponse: Response!
}

type CompletedCoupleMissionResponse {
  coupleMission: CoupleMission!
  data: [CompletedCoupleMissionData!]!
  mission: Mission!
}

type CompletedCoupleMissionsResponse {
  data: [CompletedCoupleMissionResponse!]!
  totalCount: Int!
}

type Couple {
  """The number of missions this couple has completed."""
  completedMissionCount: Int!
  coupleId: BigInt!
  createdAt: DateTime!
  inviteeId: String!
  inviterId: String!

  """The number of days since the user formed a couple."""
  relationshipDays: Int!
  startDate: DateTime
}

type CoupleMission {
  coupleId: BigInt!
  coupleMissionId: BigInt!
  createdAt: DateTime!
  isCompleted: Boolean!
  missionId: BigInt!
  reminderCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteUserResponse {
  success: Boolean!
}

enum EnumGender {
  FEMALE
  MALE
  UNKNOWN
}

enum EnumMissionCategory {
  CONFLICT_RESOLUTION
  DISAPPOINTMENT
  EXPECTATION_AND_ROLE
  FEAR_N_DIFFICULTY
  GROWTH_AND_LEARNING
  HAPPINESS_N_THANKS
  INFLUENCE_N_CHANGE
  POSITIVE_N_ATTRACTION
}

enum EnumOAuthProviderType {
  APPLE
  GOOGLE
  KAKAO
}

enum EnumResponseType {
  MULTIPLE_CHOICE
  NUMBER
  SINGLE_CHOICE
  TEXT
  YES_NO
}

enum EnumSubscriptionStatus {
  ACTIVE
  ACTIVE_TRIAL
  CANCELED
  EXPIRED
  PAUSED
  UNSUBSCRIBED
}

type GoogleLoginResponse {
  """Custom token of firebase authentication user.(only if success)"""
  customToken: String!
  userId: String!
}

type KakaoLoginResponse {
  """Custom token of firebase authentication user.(only if success)"""
  customToken: String!
  userId: String!
}

type Mission {
  category: EnumMissionCategory!
  missionId: BigInt!
  questions: [Question!]!
  title: String!
}

type Mutation {
  """Authenticates a user via Apple OAuth, registers if new."""
  appleLogin(
    """Authentication id token value. (for Apple)"""
    idToken: String!

    """
    If you want to check nonce claim, provide a string value here. It is used on Open ID for the ID Tokens.
    """
    nonce: String = null
  ): AppleLoginResponse!

  """Deletes a user account."""
  deleteUser(userId: String!): DeleteUserResponse!

  """Authenticates a user via Google OAuth, registers if new."""
  googleLogin(
    """Authentication id token value. (for Google)"""
    idToken: String!
  ): GoogleLoginResponse!

  """Authenticates a user via Kakao OAuth, registers if new."""
  kakaoLogin(
    """Authentication access token value. (for Kakao)"""
    accessToken: String!
  ): KakaoLoginResponse!

  """Register a couple"""
  registerCouple(inviteePersonalCode: String!, inviterId: String!): RegisterCoupleResponse!
  remindMissionPartner(coupleMissionId: BigInt!, userId: String!): RemindMissionPartnerResponse!
  submitMissionResponse(coupleMissionId: BigInt = null, data: [SubmitMissionResponseRequestData!]!, missionId: BigInt!, userId: String!): SubmitMissionResponseResponse!

  """
  Updates the start date of a couple's relationship to a new specified date.
  """
  updateCoupleStartDate(coupleId: BigInt!, coupleStartDate: DateTime!): UpdateCoupleStartDateResponse!
  updateNotificationTime(
    """
    Notification time represented as formatted string, e.g., "08:00"
    """
    notificationTime: String!
    userId: String!
  ): UpdateNotificationTimeResponse!
  updateResponse(newContent: String!, responseId: BigInt!, userId: String!): UpdateResponseResponse!

  """
  Updates a user's details based on the provided userId and input fields. Only the fields specified in the input will be updated.
  """
  updateUser(input: UpdateUserInputRequest!, userId: String!): UpdateUserResponse!
}

type Query {
  completedCoupleMission(coupleMissionId: Int!, userId: String!): CompletedCoupleMissionResponse
  completedCoupleMissions(
    shuffle: Boolean = false

    """
    Determines how many items to skip before retrieving data. default value: 0.
    """
    skip: Int = 0

    """The number of items to retrieve per page. default value: 10."""
    take: Int = 10
    userId: String!
  ): CompletedCoupleMissionsResponse!
  couple(coupleId: BigInt!): Couple
  mission(missionId: BigInt!): Mission
  todayMission(userId: String!): TodayMissionResponse

  """get one user by user id."""
  user(userId: String!): User
}

type Question {
  content: String!
  questionId: BigInt!
  questionOrder: Int!
  responseType: EnumResponseType!
}

type RegisterCoupleResponse {
  code: String
  message: String
  success: Boolean!
}

type RemindMissionPartnerResponse {
  message: String
  success: Boolean!
}

type Response {
  content: String!
  coupleMissionId: BigInt
  createdAt: DateTime!
  questionId: BigInt!
  responseId: BigInt!
  userId: String!
}

input SubmitMissionResponseRequestData {
  content: String!
  questionId: BigInt!
}

type SubmitMissionResponseResponse {
  message: String
  success: Boolean!
}

type TodayMissionResponse {
  coupleMission: CoupleMission
  mission: Mission!
  partnerResponse: TodayMissionResponseObject
  userResponse: TodayMissionResponseObject!
}

type TodayMissionResponseObject {
  data: [Response!]!
  isCompleted: Boolean!
}

type UpdateCoupleStartDateResponse {
  couple: Couple!
}

type UpdateNotificationTimeResponse {
  user: User!
}

type UpdateResponseResponse {
  response: Response!
}

"""
UpdateUserInputRequest allows you to update user details. All fields are optional; only provided fields will be updated.
"""
input UpdateUserInputRequest {
  birthday: DateTime = null
  coupleStartDate: DateTime = null
  gender: EnumGender = null
  isProfileCompleted: Boolean = null
  nickname: String = null
  profileImageUrl: String = null
}

type UpdateUserResponse {
  user: User!
}

type User {
  birthday: DateTime!
  couple: Couple
  coupleStartDate: DateTime
  createdAt: DateTime!
  email: String!
  gender: EnumGender!

  """Determine if the user is currently in a couple."""
  isCoupled: Boolean!
  isDeleted: Boolean!
  isProfileCompleted: Boolean!
  isSubscriptionActive: Boolean!
  nickname: String!
  notificationTime: String
  oauthProviderType: EnumOAuthProviderType!

  """
  The user's partner in the couple. If the user is not in a couple, this field will be null.
  """
  partner: User
  personalCode: String!
  profileImageUrl: String!
  subscriptionStatus: EnumSubscriptionStatus!
  updatedAt: DateTime!

  """The number of days since the user started using the app."""
  usageDays: Int!
  userId: String!
}
