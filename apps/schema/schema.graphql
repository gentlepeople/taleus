directive @upper on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Couple {
  coupleId: Int!
  createdAt: DateTime!
  inviteeId: String!
  inviterId: String!

  """The number of days since the user formed a couple."""
  relationshipDays: Int!
  startDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteUserResponse {
  success: Boolean!
}

enum EnumGender {
  FEMALE
  MALE
  UNKNOWN
}

enum EnumOAuthProviderType {
  KAKAO
}

type KakaoLoginResponse {
  """Custom token of firebase authentication user.(only if success)"""
  customToken: String!
  userId: String!
}

type Mutation {
  """Deletes a user account."""
  deleteUser(userId: String!): DeleteUserResponse!

  """Authenticates a user via Kakao OAuth, registers if new."""
  kakaoLogin(
    """Authentication access token value. (for Kakao)"""
    accessToken: String
  ): KakaoLoginResponse!

  """Register a couple"""
  registerCouple(inviteePersonalCode: String!, inviterId: String!): RegisterCoupleResponse!

  """
  Updates a user's details based on the provided userId and input fields. Only the fields specified in the input will be updated.
  """
  updateUser(input: UpdateUserInputRequest!, userId: String!): UpdateUserResponse!
}

type Query {
  couple(coupleId: Int!): Couple

  """get one user by user id."""
  user(userId: String!): User
}

type RegisterCoupleResponse {
  code: String
  message: String
  success: Boolean!
}

"""
UpdateUserInputRequest allows you to update user details. All fields are optional; only provided fields will be updated.
"""
input UpdateUserInputRequest {
  birthday: DateTime = null
  gender: String = null
  nickname: String = null
  profileImageUrl: String = null
}

type UpdateUserResponse {
  user: User!
}

type User {
  birthday: DateTime!
  couple: Couple
  createdAt: DateTime!
  email: String!
  gender: EnumGender!
  isAnonymous: Boolean!

  """Determine if the user is currently in a couple."""
  isCoupled: Boolean!
  nickname: String!
  oauthProviderType: EnumOAuthProviderType!

  """
  The user's partner in the couple. If the user is not in a couple, this field will be null.
  """
  partner: User
  personalCode: String!
  profileImageUrl: String!
  updatedAt: DateTime!

  """The number of days since the user started using the app."""
  usageDays: Int!
  userId: String!
}
