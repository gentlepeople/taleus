generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma-client"
  previewFeatures = ["tracing"]
  binaryTargets   = ["native", "darwin-arm64", "debian-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_DB_URL")
  directUrl = env("POSTGRES_DB_DIRECT_URL")
}

model data_migrations {
  version     String   @id
  name        String
  started_at  DateTime
  finished_at DateTime

  @@map("_data_migrations")
}

model user {
  userId                     String            @id @map("user_id") @db.VarChar
  nickname                   String            @db.VarChar
  email                      String            @db.VarChar
  emailVerified              Boolean           @map("email_verified")
  profileImageUrl            String            @map("profile_image_url") @db.VarChar
  gender                     String            @db.VarChar
  birthday                   DateTime          @db.Timestamp(6)
  coupleStartDate            DateTime?         @map("couple_start_date") @db.Timestamp(6)
  oauthProviderType          String            @map("oauth_provider_type") @db.VarChar
  oauthProviderId            String            @map("oauth_provider_id") @db.VarChar
  personalCode               String            @unique @map("personal_code") @db.VarChar
  notificationTime           DateTime?         @map("notification_time") @db.Time(6)
  subscriptionStatus         String            @default("UNSUBSCRIBED") @map("subscription_status") @db.VarChar
  isProfileCompleted         Boolean           @default(false) @map("is_profile_completed")
  createdAt                  DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt                  DateTime?         @map("deleted_at") @db.Timestamptz(6)
  coupleAsInvitee            couple?           @relation("coupleInviteeIdTousers")
  coupleAsInviter            couple?           @relation("coupleInviterIdTousers")
  missionRemindersAsReceiver missionReminder[] @relation("missionReminderReceiverIdTousers")
  missionRemindersAsSender   missionReminder[] @relation("missionReminderSenderIdTousers")
  response                   response[]

  @@index([oauthProviderId], map: "index_users_oauth_provider_id")
  @@index([notificationTime], map: "index_users_notification_time")
  @@map("users")
}

model couple {
  coupleId      BigInt          @id @default(autoincrement()) @map("couple_id")
  inviterId     String          @unique @map("inviter_id") @db.VarChar
  inviteeId     String          @unique @map("invitee_id") @db.VarChar
  startDate     DateTime?       @map("start_date") @db.Timestamp(6)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamptz(6)
  invitee       user            @relation("coupleInviteeIdTousers", fields: [inviteeId], references: [userId])
  inviter       user            @relation("coupleInviterIdTousers", fields: [inviterId], references: [userId])
  coupleMission coupleMission[]

  @@index([inviteeId], map: "index_couple_invitee_id")
  @@index([inviterId], map: "index_couple_inviter_id")
}

model coupleMission {
  coupleMissionId  BigInt            @id @default(autoincrement()) @map("couple_mission_id")
  coupleId         BigInt            @map("couple_id")
  missionId        BigInt            @map("mission_id")
  isCompleted      Boolean           @default(false) @map("is_completed")
  reminderCount    Int               @default(0) @map("reminder_count")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  couple           couple            @relation(fields: [coupleId], references: [coupleId])
  mission          mission           @relation(fields: [missionId], references: [missionId])
  missionReminders missionReminder[]
  response         response[]

  @@map("couple_mission")
}

model mission {
  missionId     BigInt          @id @default(autoincrement()) @map("mission_id")
  title         String          @db.VarChar
  category      String          @db.VarChar
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  coupleMission coupleMission[]
  question      question[]
}

model missionReminder {
  missionReminderId BigInt        @id @default(autoincrement()) @map("mission_reminder_id")
  coupleMissionId   BigInt        @map("couple_mission_id")
  senderId          String        @map("sender_id") @db.VarChar
  receiverId        String        @map("receiver_id") @db.VarChar
  reminderTime      DateTime      @default(now()) @map("reminder_time") @db.Timestamptz(6)
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  coupleMission     coupleMission @relation(fields: [coupleMissionId], references: [coupleMissionId])
  receiver          user          @relation("missionReminderReceiverIdTousers", fields: [receiverId], references: [userId])
  sender            user          @relation("missionReminderSenderIdTousers", fields: [senderId], references: [userId])

  @@map("mission_reminder")
}

model question {
  questionId    BigInt     @id @default(autoincrement()) @map("question_id")
  missionId     BigInt     @map("mission_id")
  questionOrder Int        @map("question_order")
  responseType  String     @map("response_type") @db.VarChar
  content       String
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  mission       mission    @relation(fields: [missionId], references: [missionId])
  response      response[]

  @@unique([missionId, questionOrder])
}

model response {
  responseId      BigInt         @id @default(autoincrement()) @map("response_id")
  coupleMissionId BigInt?        @map("couple_mission_id")
  userId          String         @map("user_id") @db.VarChar
  questionId      BigInt         @map("question_id")
  content         String
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  coupleMission   coupleMission? @relation(fields: [coupleMissionId], references: [coupleMissionId], onDelete: Restrict)
  question        question       @relation(fields: [questionId], references: [questionId])
  user            user           @relation(fields: [userId], references: [userId])

  @@unique([coupleMissionId, userId, questionId])
  @@index([userId, questionId], map: "index_response_user_id_question_id")
}
